name: Deploy to Prod Stage

on:
  push:
    branches:
      - main


env:
  API_KEY_ALCHEMY: ${{ secrets.API_KEY_ALCHEMY }}
  DEPLOYER_PKEY: ${{ secrets.DEPLOYER_PKEY }}
  DEPLOYER_ADDRESS: ${{ vars.DEPLOYER_ADDRESS }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
  FOUNDRY_PROFILE: "ci"
  API_DEVOPS_EVENT_CATCHER: ${{ vars.API_DEVOPS_EVENT_CATCHER }}
  DEVOPS_EVENTS_SECRET_TOKEN: ${{ secrets.DEVOPS_EVENTS_SECRET_TOKEN }}

jobs:

  deploy_to_stable_node:
    runs-on: "ubuntu-latest"
    permissions: "write-all"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v4"
        with:
          submodules: "recursive"

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Set deployer balance on the fork"
        run: |
          curl -X POST -H "Content-Type:application/json" --data \
          '{"jsonrpc":"2.0","method":"hardhat_setBalance","params":["'"${{ vars.DEPLOYER_ADDRESS }}"'","0x75557863725914323419136"],"id":67}' \
          "${{ vars.STABLE_RPC }}"

      - name: "Prepare Python environment"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: "Prep access to S3 bucket"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: "Update setupFork script with the correct FORK RPC URL"
        run: |
          sed -i 's|THE_FORK_URL|"${{ vars.STABLE_RPC }}"|' script/setupFork.py

      - name: "Deploy the contracts to EC2 test Hardhat environment"
        run: |
          forge script script/DeployContracts.s.sol --fork-url  ${{ vars.STABLE_RPC }} --broadcast --slow --skip-simulation

      - name: Create JSON file
        run: |
          echo '{
            "rpc": "${{ vars.STABLE_RPC }}"
            }' > deployments/stable_rpc.json

      - name: "Updating AWS S3 bucket with the contract addresses"
        run: |
          aws s3 cp deployments/deployments.json s3://smart-contract-backend-config/addresses/stable_leverage_addresses.json --acl public-read
          python script/prep_addresses_json.py
          aws s3 cp deployments/deployments.json s3://smart-contract-backend-config/abis/stable_leverage_abis.json --acl public-read
          aws s3 cp deployments/stable_rpc.json s3://smart-contract-backend-config/stable_rpc.json --acl public-read

      - name: "Add deploy summary"
        run: |
          echo "## Deploy result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

  deploy_to_demo_node:
    needs: ["deploy_to_stable_node"]
    runs-on: "ubuntu-latest"
    permissions: "write-all"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v4"
        with:
          submodules: "recursive"

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Prepare Python environment"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: "Prep access to S3 bucket"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: "Update setupFork script with the correct fork RPC URL"
        run: |
          sed -i 's|THE_FORK_URL|"${{ vars.DEMO_RPC }}"|' script/setupFork.py

      - name: "Deploy the contracts to demo environment"
        run: |
          forge script script/DeployContracts.s.sol --fork-url  ${{ vars.DEMO_RPC }} --broadcast --slow --skip-simulation

      - name: Create JSON file
        run: |
          echo '{
            "rpc": "${{ vars.DEMO_RPC }}"
            }' > deployments/demo_rpc.json

      - name: "Updating AWS S3 bucket with the contract addresses"
        run: |
          aws s3 cp deployments/deployments.json s3://smart-contract-backend-config/addresses/demo_leverage_addresses.json --acl public-read
          python script/prep_addresses_json.py
          aws s3 cp deployments/deployments.json s3://smart-contract-backend-config/abis/demo_leverage_abis.json --acl public-read
          aws s3 cp deployments/demo_rpc.json s3://smart-contract-backend-config/demo_rpc.json --acl public-read

      - name: "Add deploy summary"
        run: |
          echo "## Deploy result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

  
  report-devops-event-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: List all commit SHAs involved in the push
        id: format_commits
        shell: bash
        run: |
          ./devops/github_actions_templates/get_commit_shas.sh ${{ github.event.before }} ${{ github.event.after }} > commit_shas.txt
          COMMIT_SHAS_JSON=$(cat commit_shas.txt)
          echo "::set-output name=commit_shas::$COMMIT_SHAS_JSON"

      - name: Report DevOps Event
        run: |
          yarn add axios dotenv
          node devops/metrics/src/cicd_script/report_devops_event.js ${{ github.repository }} deploy '{"commit_ids": ${{ steps.format_commits.outputs.commit_shas }} }'          
        env:
          API_DEVOPS_EVENT_CATCHER: ${{ vars.API_DEVOPS_EVENT_CATCHER }}
          DEVOPS_EVENTS_SECRET_TOKEN: ${{ secrets.DEVOPS_EVENTS_SECRET_TOKEN }}

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}